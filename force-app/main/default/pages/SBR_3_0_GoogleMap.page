<!--
  @description       : 
  @author            : ChangeMeIn@UserSettingsUnder.SFDoc
  @group             : 
  @last modified on  : 02-05-2024
  @last modified by  : Kunal Patel
-->
<apex:page showHeader="false" controller="SBR_3_0_GoogleMapCmpController" action="{!setGoogleMapAPIKey}">

    <style type="text/css">
        
        html { height: 100%; }
        body { height: 100%; margin: 0; }
        .container, .container > div, .container > div #map {
            height: inherit;
        }

        #search-location-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 400px;
        }

        .slds-button {
            padding: 7px 16px;
            background: #25683E;
            border-radius: 4px;
            color: #FFFFFF;
            font-weight: normal;
        }

     </style>
    
    <html>
        <head>
            <!-- 
                This stylesheet contains specific styles for displaying the map on this page. Replace it with your own styles as described in the documentation:
                https://developers.google.com/maps/documentation/javascript/tutorial 
            -->
            <link rel="stylesheet" href="//developers.google.com/maps/documentation/javascript/demos/demos.css"/>
            <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons"/>
            <meta name="viewport" content="width=device-width, initial-scale=1"/>

        </head>
        <body>
            <div class="container">
                <div>
                    <input id="search-location-input" type="text" placeholder="Search by Street Address or City"></input>

                    <div id="map"></div>
                </div>
            </div>

            <script src="/soap/ajax/53.0/connection.js" type="text/javascript"/>
            <script src="/soap/ajax/53.0/apex.js" type="text/javascript"/>

            <script>
                var lexOrigin = "https://{!$CurrentPage.parameters.lcHost}";
                
                //Data for Google map
                var data;
                var markers = [];
                var tempMarker;
                var highlightMarker;
                var highlightMarkerPrevIcon;
                var infoWindow;

                var pinDropLat;
                var pinDropLng;
                var pinDropStreet;
                var pinDropCity;
                var pinDropState;
                var pinDropFullState;
                var pinDropCountry;
                var pinDropZip;
                var pinDropZip_suffix;

                // territory data and ADA Safe colors
                var polygonData = [];
                var territoryData = [];
                const colorGreen = '#008000';
                const colorGold = '#806C00';
                const colorBlue = '#009FD4';
                const colorMaroon = '#A74165';
                const colorOrange = '#AA2E00';
                const colorPurple = '#B381B3';
                const colorTeal = '#007A7C';
                const colorRed = '#D50000';

                const adaSafeColors = [colorGreen, colorGold, colorBlue, colorMaroon,
                                        colorOrange, colorPurple, colorTeal, colorRed];

                const blankPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Blank.png')}";
        		const defaultAccount = "{!URLFOR($Resource.map_pins, 'map_pins/images/Account.png')}";
                const appointmentPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Appointment.png')}";
                const projectPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Project.png')}";
                const watchlistPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Account_Watchlist.png')}";
                const top50Pin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Account_Top50.png')}";
                const prospectPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Account_Prospect.png')}";
                const dormantPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Account_Dormant.png')}";
                const branchPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Branch.png')}";
                const opportunityPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Opportunity.png')}";
                const jobsitePin = "{!URLFOR($Resource.map_pins, 'map_pins/images/JobSite.png')}";
                const leadPin = "{!URLFOR($Resource.map_pins, 'map_pins/images/Lead.png')}";

                //Let LC know that VF page been loaded along with it"s URL
                //LC will then send the data
                //This is done because LC has no way to know that VF page in iFrame has been loaded, event listener set and ready for data
                var vfHost = "{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}";
                sendToLC({"request":"LOADED", "vfHost": vfHost});
                
                //Send message to LC
                function sendToLC(message) {
                    console.log("sendToLC message ->", message);
                    console.log("sendToLC lexOrigin ->", lexOrigin);
                    if(typeof(lexOrigin) != "undefined"){
                        window.parent.postMessage(message, lexOrigin);
                    }
                }
                
                //Receive message from LC
                window.addEventListener("message", function(event) {
                    
                    // Handle message
                    //console.log("Data Received by VF: ", event.data);
                    console.log("Data Received by VF...");
        
                    if(typeof event.data !== 'object') {
                        var lwcData = JSON.parse(event.data);
                        console.log("Parsed Data: ", lwcData);
                    }
                    
                    if(lwcData.loadGoogleMap == true) {
                        console.log('loading google map');
                        //Load Google Map Script
                        var script = document.createElement("script");

                        const key = '{!apiKey}';
                        console.log('apiKey -> ' + key);
                        // Testing - added geometry library -- Proof of Concept (PoC)
                        script.src = "https://maps.googleapis.com/maps/api/js?key=" + key + "&callback=initMap&libraries=places,geometry";

                        document.getElementsByTagName("head")[0].appendChild(script);
                        data = lwcData;
                    }
                    else if(lwcData.reloadMap == true) {
                        data = lwcData;
                        reloadMap();
                    }
                    else if(lwcData.createSidePanelControl == true) {
                        createSidePanelControl(map);
                    }
                    else if(lwcData.markerType == 'myLocation') {
                        console.log('receiving message for myLocation');
                        addMarker({markerType: 'myLocation', lat: lwcData.position.lat, lng: lwcData.position.lng});
                        map.setCenter(google.maps.LatLng(lwcData.position.lat, lwcData.position.lng));
                    }
                    else if(lwcData.markerType == 'recenter') {
                        var position = lwcData.position;
                        map.setCenter(position);
                    }
                    else if(lwcData.markerType == 'recenterToRecord') {
                        
                        console.log('recentering to row');
                        console.log(lwcData);
                        var recId = lwcData.recId;
                        var position = lwcData.position;
                        var name = lwcData.name;
                        var address = lwcData.address;
                        var recordType = lwcData.recordType;

                        console.log('data: ', data);
                        console.log('recenter - markers:', markers);
                        console.log('recenter - markers values:', markers.values());

                        if(tempMarker != undefined) {
                            tempMarker.setMap(null);
                        }

                        reloadMap(); // will clear any other highlights
                        highlightMarker = markers.filter(element => element.recId == recId);

                        // highlight marker
                        console.log('highlightMarker -> ', highlightMarker);
                        if(highlightMarker.length > 0) {
                            highlightMarker = highlightMarker[0];
                            highlightMarkerPrevIcon = highlightMarker.getIcon();
                            highlightMarker.setIcon(null);
                            highlightMarker.setZIndex(999);
                        }

                        createInfoWindow(recId, name, address, position, recordType, highlightMarker);

                        map.setCenter(position);
                        
                    }
                    else if(lwcData.markerType == 'addMarker') {
                        console.log('lwcData below in VF addMarker');
                        console.log(lwcData);
                        if(infoWindow) {
                            infoWindow.close();
                        }
                        markers.forEach((element) => {
                            element.infoWindow.close();
                        });

                        var newM = {
                            markerType: lwcData.objectType, objectType: lwcData.objectType, 
                            recId: lwcData.recId, summary: lwcData.summary, 
                            lat: lwcData.position.lat, lng: lwcData.position.lng,
                            street: lwcData.street, city: lwcData.city, state: lwcData.state, 
                            postal: lwcData.postal, country: lwcData.country, address: lwcData.address,recordType: lwcData.recordType};

                        console.log('newM -> below');
                        console.log(newM);
                        addMarker(newM);
                        data.mapData.push(newM);
                        map.setCenter(lwcData.position);

                    }
                    else if(lwcData.action == 'toggleTerritory') {
                        console.log('lwcData toggleTerritory');
                        console.log(lwcData);
                        let showTerritories = lwcData.showTerritories;

                        if(polygonData && polygonData.length) {
                            polygonData.forEach((element, index) => {
                                if(showTerritories) {
                                    element.setMap(map);
                                }
                                else {
                                    element.setMap(null);
                                }
                            });
                        }
                    }
                }, false);

                function createInfoWindow(recId, name, address, position, recordType, marker) {
                    var lat;
                    var lng;
                    if(infoWindow) {
                        infoWindow.close();
                    }

                    infoWindow = new google.maps.InfoWindow({
                        //position: position
                    });

                    if (position.lat && position.lng){
                        lat = position.lat + ', ';
                        lng = position.lng;
                    } 
                    else {
                        lat = 'No ';
                        lng = 'Lat/Long';
                    }
                    infoWindow.setContent(
                        '<b>' + name + '</b><hr/><br/><a title="' 
                        + address + '" href="https://www.google.com/maps?q=' 
                        + address + '"target="_blank" rel="noopener">'
                        + '<div>' + address + '</div></a><br/>' 
                        + recordType
                        + "<br/><br/><button class=\"slds-button\" onclick=sendRecordActionToPanel(\'" + "view"+ "\',\'" 
                        + recId + "')>See More</button>"
                    );

                    infoWindow.open({
                        anchor: marker
                    });

                    //infoWindow.open(map);
                }

                //Callback when Google Map is loaded
                function initMap() {

                    // Create new map
                    map = new google.maps.Map(document.getElementById("map"));

                    // map click listener
                    map.addListener("click", (mapsMouseEvent) => {
                        // Create a new InfoWindow.
                        console.log("mapsMouseEvent ", mapsMouseEvent);
                        console.log("mapsMouseEvent.latLng ", mapsMouseEvent.latLng);
                        console.log('infoWindow -> ', infoWindow);

                        // replace the infoWindow's marker Icon as well
                        if(tempMarker != undefined) {
                            tempMarker.setMap(null);
                        }
                        setMapData(data.mapData);

                        if(infoWindow) {
                            infoWindow.close();
                            infoWindow = null; 
                        } 
                        else {

                            infoWindow = new google.maps.InfoWindow({
                                position: mapsMouseEvent.latLng,
                            });
                            infoWindow.setContent(
                                "<button class=\"slds-button\" onclick=createPin(&quot;" + mapsMouseEvent.latLng.lat() + "&quot;,&quot;" + mapsMouseEvent.latLng.lng() + "&quot;)>Create Pin</button>"
                            );
                            infoWindow.open(map);

                            markers.forEach((element) => {
                                element.infoWindow.close();
                            });
                        }
                    });

                    // Set map center
                    map.setCenter(data.mapOptionsCenter);

                    // Move style options to top right
                    map.setOptions( { 
                        mapTypeControlOptions: {
                            style: google.maps.MapTypeControlStyle.DEFAULT,
                            position: google.maps.ControlPosition.TOP_RIGHT,
                        },
                        streetViewControl: false,
                        zoomControl: false,
                        zoom: 10,
                        gestureHandling: 'greedy'
                    });
                
                    // create side panel
                    //createSidePanelControl(map);

                    // create zoom control
                    createZoomControl(map);

                    // Create Polygons
                    createPolygons();

                    // create current location control
                    createCurrentLocationControl(map);
                    
                    //iterate through map data to create markers
                    setMapData(data.mapData);

                    createSearchControl(map);

                }

                function reloadMap() {
                    clearMarkers();
                    //iterate through map data to create markers
                    console.log('reloadMap - data.mapData:', data.mapData);
                    setMapData(data.mapData);

                    clearPolygons();

                    // Create Polygons
                    createPolygons();
                }

                function setMapData(mapData) {
                    if(mapData != null) {
                        //iterate through map data to create markers
                        for(var i = 0, j = mapData.length; i < j; i++)
                        {
                            if(mapData[i].objectType != 'Task') {
                                console.log(mapData[i].objectType);
                                addMarker(mapData[i]);
                            }
                        }
                    }
                }

                function createPolygons() {

                    polygonData = [];
                    territoryData = data.territories;
                    console.log('territoryData');
                    console.log(territoryData);
                    if(territoryData) {

                        let userColorMap = new Map();
                        
                        territoryData.forEach((element, index) => {
                            let polyColor;
                            let userId = territoryData[index].userId;
                            if(userColorMap.get(userId)) {
                                polyColor = userColorMap.get(userId);
                            }
                            else {
                                polyColor = adaSafeColors[userColorMap.size % adaSafeColors.length];
                                userColorMap.set(userId, polyColor);
                            }
                        });

                        userColorMap.forEach((element, key) => {
                            let polyColor = userColorMap.get(key);
                            const terrs = territoryData.filter(territory => territory.userId == key);

                            if(terrs) {
                                terrs.forEach((terElem, index) => {
                                    let poly = new google.maps.Polygon({
                                        paths: terElem.latLngList,
                                        strokeColor: polyColor,
                                        strokeOpacity: 0.8,
                                        strokeWeight: 2,
                                        fillColor: polyColor,
                                        fillOpacity: 0.35,
                                    });
                                    polygonData.push(poly);

                                    // Test code for polygon geospacial query -- Proof of Concept (PoC)
                                    /*console.log('containsLocation ->');
                                    //let sampleLatLng = new google.maps.LatLng(32.33398622467996, -98.4407654829044);
                                    let limit = 25000;
                                    for(let i = 0; i < limit; i++) {
                                        let lat_test = 32.449555096014905 + (i * .00001); 
                                        let lng_test = -97.9129574304675 + (i * .00001); 
                                        let sampleLatLng = new google.maps.LatLng(lat_test, lng_test);
                                        //console.log('sampleLatLng ->', sampleLatLng);
                                        console.log(google.maps.geometry.poly.containsLocation(sampleLatLng, poly));
                                    }*/
                                });
                            }
                        });

                        if(polygonData.length) {

                            polygonData.forEach((element, index) => {
                                // map click listener
                                element.addListener("click", (mapsMouseEvent) => {
                                    // Create a new InfoWindow.
                                    console.log("mapsMouseEvent ", mapsMouseEvent);
                                    console.log("mapsMouseEvent.latLng ", mapsMouseEvent.latLng);
                                    console.log('infoWindow -> ', infoWindow);

                                    // replace the infoWindow's marker Icon as well
                                    if(tempMarker != undefined) {
                                        tempMarker.setMap(null);
                                    }
                                    setMapData(data.mapData);

                                    if(infoWindow) {
                                        infoWindow.close();
                                        infoWindow = null; 
                                    } 
                                    else {

                                        infoWindow = new google.maps.InfoWindow({
                                            position: mapsMouseEvent.latLng,
                                        });
                                        infoWindow.setContent(
                                            "<button class=\"slds-button\" onclick=createPin(&quot;" + mapsMouseEvent.latLng.lat() + "&quot;,&quot;" + mapsMouseEvent.latLng.lng() + "&quot;)>Create Pin</button>"
                                        );
                                        infoWindow.open(map);

                                        markers.forEach((element) => {
                                            element.infoWindow.close();
                                        });
                                    }
                                });
                                element.setMap(map);
                            });
                        }
                    }

                }

                function hidePolygons() {
                    if(polygonData && polygonData.length) {
                        polygonData.forEach((element, index) => {
                            element.setMap(null);
                        });
                    }
                }

                function clearPolygons() {
                    if(polygonData && polygonData.length) {
                        polygonData.forEach((element, index) => {
                            element.setMap(null);
                        });
                    }
                    polygonData = [];
                }

                function showPolygons() {
                    if(polygonData && polygonData.length) {
                        polygonData.forEach((element, index) => {
                            element.setMap(map);
                        });
                    }
                }

                //Add marker for each point along with text
                function addMarker(feature) {

                    var marker;
                    //Add marker for each point
                    var myLatlng;
                    console.log('feature.markerType: ',feature.markerType);
                    if(feature.lat != undefined && feature.lng != undefined) {
                        feature.position = new google.maps.LatLng(feature.lat, feature.lng);
                    
                        var image = blankPin;
                        if(feature.markerType == 'project') image = projectPin;
                        if(feature.markerType == 'watchlist') image = watchlistPin;
                        if(feature.markerType == 'dormant') image = dormantPin;
                        if(feature.markerType == 'prospect') image = prospectPin;
                        if(feature.markerType == 'top25' || feature.markerType == 'top50') image = top50Pin;
                        if(feature.markerType == 'appointment') image = appointmentPin;
                        if(feature.markerType == 'branch') image = branchPin;
                        if(feature.markerType == 'opportunity') image = opportunityPin;
                        if(feature.markerType == 'jobsite') image = jobsitePin;
                        if(feature.markerType == 'lead') image = leadPin;

	                    if(feature.objectType == 'Account') { feature.iconName = 'standard:account'; image = defaultAccount;}
                        if(feature.objectType == 'Account' && feature.markerType == 'prospect') { feature.iconName = 'standard:account'; image = prospectPin;}
                        if(feature.objectType == 'Account' && (feature.markerType == 'top25' || feature.markerType == 'top50')) { feature.iconName = 'standard:account'; image = top50Pin;}
                        if(feature.objectType == 'Account' && feature.markerType == 'watchlist') { feature.iconName = 'standard:account'; image = watchlistPin;}
                        if(feature.objectType == 'Account' && feature.markerType == 'dormant') { feature.iconName = 'standard:account'; image = dormantPin;}

                        if(feature.objectType == 'Lead') { feature.iconName = 'standard:lead'; image = leadPin;}
                        if(feature.objectType == 'Project__c') { feature.iconName = 'custom:custom57'; image = projectPin;}
                        if(feature.objectType == 'Opportunity') { feature.iconName = 'standard:opportunity'; image = opportunityPin;}


                        if(feature.markerType == 'myLocation') {
                            marker = new google.maps.Marker({
                                position: feature.position,
                                map: map,
                                icon: {
                                    path: google.maps.SymbolPath.CIRCLE,
                                    scale: 10,
                                    fillOpacity: 1,
                                    strokeWeight: 2,
                                    fillColor: '#5384ED',
                                    strokeColor: '#ffffff',
                                },
                                recId: feature.recId
                            });
                            marker.infoWindow = new google.maps.InfoWindow({
                                content: 'Your Location'
                            });
                        } 
                        else {
                            if(image == blankPin) {console.log('blank pin feature below -> '); console.log(feature);}
                            marker = new google.maps.Marker({
                                position: feature.position,
                                map: map,
                                icon: image,
                                recId: feature.recId,

                            });
                            marker.infoWindow = new google.maps.InfoWindow({
                                content: getPinContents(feature)
                            });
                        }

                        console.log('marker:', marker);

                        markers.push(marker);

                        // Add a marker clusterer to manage the markers.
                        // https://developers.google.com/maps/documentation/javascript/marker-clustering
                        //new google.maps.MarkerClusterer({ markers, map });
                        
                        marker.addListener("click", function() {
                            console.log('selected Marker below');
                            console.log(marker);
                            if(infoWindow) {
                                infoWindow.close();
                                infoWindow = null;
                            }

                            if(tempMarker != undefined) {
                                tempMarker.setMap(null);
                            }

                            if(highlightMarker != undefined && highlightMarker != null && highlightMarker.length != 0) {
                                highlightMarker.setIcon(highlightMarkerPrevIcon);
                            }

                            markers.forEach((element) => {
                                element.infoWindow.close();
                            });

                            highlightMarkerPrevIcon = marker.getIcon();
                            highlightMarker = marker;
                            marker.setIcon(null);
                            marker.setZIndex(999);
                            marker.infoWindow.open(map, marker);

                            //sendRecordActionToPanel('view', feature.recId);

                        });
                    }
                }

                function getPinContents(feature) {
                    
                    let address = feature.address;

                    var result = '';

                    if(!address) {
                        var street = feature.street;
                        var city = feature.city;
                        var state = feature.state;
                        var postal = feature.postal;
                        var country = feature.country;

                        address = buildAddress(street, city, state, postal, country);
                    }
                    

                    result = '<b>' + feature.summary + '</b><hr/><br/><a title="' 
                        + address + '" href="https://www.google.com/maps?q=' 
                        + address + '"target="_blank" rel="noopener">'
                        + '<div>' + address + '</div></a><br/>' 
                        + feature.recordType
                        + "<br/><br/><button class=\"slds-button\" onclick=sendRecordActionToPanel(\'" + "view"+ "\',\'" 
                        + feature.recId + "')>See More</button>";
                    console.log(result);
                    return result;

                }

                function buildAddress(street, city, state, postal, country) {
                    var addressArray = [street, city, state, postal, country];
                    addressArray = addressArray.filter(element => element); // remove nulls, blanks, undefined
                    var address = addressArray.join(', ');

                    return address;
                }

                // create task
                function createTask(accId) {
                    console.log("create task with accId " + accId);
                    sforce.connection.sessionId = "{!$Api.Session_ID}";
                    var t = new sforce.SObject("Task");
                    t.Subject = "Test Task created from GoogleMap VF";
                    t.Status = "Open";
                    t.Priority = "Normal";
                    t.WhatId = accId;
                    //Create method
                    var result = sforce.connection.create([t]);
                    //Getting result
                    if(result[0].getBoolean("success")) {
                        alert("New Task is created with id " + result[0].id);
                    } 
                    else {
                        alert("failed to create new Task " + result[0]);
                    }
                }

                // create pin
                function createPin(lat, lng) {
                    console.log("create marker at lat,lng ->", lat, lng);

                    var myLatlng = new google.maps.LatLng(lat, lng);
                    const geocoder = new google.maps.Geocoder();

                    pinDropLat = '';
                    pinDropLng = '';
                    pinDropStreet = '';
                    pinDropCity = '';
                    pinDropState = '';
                    pinDropFullState = '';
                    pinDropCountry = '';
                    pinDropZip = '';
                    pinDropZip_suffix = '';

                    geocoder.geocode({ location: myLatlng })
                    .then((response) => {
                        console.log(response);
                        if (response.results[0]) {
                            
                            //Add marker for each point
                            if(tempMarker != null) {
                                tempMarker.setMap(null);
                            }

                            reloadMap();

                            tempMarker = new google.maps.Marker({
                                position: myLatlng,
                                map: map,
                                anchorPoint: new google.maps.Point(0, -15),
                                icon: blankPin
                            });

                            let address = response.results[0];

                            // Rounded to 5 decimal added 03/21/23 - SF is not truncating values per field length limit
                            pinDropLat = parseFloat(lat).toFixed(5);
                            pinDropLng = parseFloat(lng).toFixed(5);


                            console.log('addr length -> ' + address.address_components.length);
                            console.log(address.address_components);
                            var streetNum, streetName = '';

                            for (var count = 0; count < address.address_components.length; count++) {
                                let addr_cmp = address.address_components[count];
                                console.log('count -> ' + count);
                                console.log(addr_cmp);
                                var addr_types = addr_cmp.types;
                                console.log(addr_types);
                                if(addr_types.includes('street_number')) {
                                    streetNum = addr_cmp.long_name;
                                }
                                if(addr_types.includes('route')) {
                                    streetName = addr_cmp.short_name;
                                }
                                if(addr_types.includes('locality')) {
                                    pinDropCity = addr_cmp.long_name;
                                }
                                if(!pinDropCity && addr_types.includes('administrative_area_level_3')) {
                                    pinDropCity = addr_cmp.long_name
                                }
                                if(!pinDropCity && addr_types.includes('sublocality')) {
                                    pinDropCity = addr_cmp.long_name;
                                }
                                if(addr_types.includes('administrative_area_level_1')) {
                                    pinDropState = addr_cmp.short_name;
                                    pinDropFullState = addr_cmp.long_name;
                                }
                                if(addr_types.includes('postal_code')) {
                                    pinDropZip = addr_cmp.long_name;
                                }
                                if(addr_types.includes('country')) {
                                    pinDropCountry = addr_cmp.short_name;
                                }
                                if(addr_types.includes('postal_code_suffix')) {
                                    pinDropZip_suffix = addr_cmp.long_name;
                                }
                            }

                            if(streetNum) { pinDropStreet = streetNum + ' ';}
                            if(streetName) { pinDropStreet += streetName};

                            if(pinDropZip_suffix) { pinDropZip += ' ' + pinDropZip_suffix};

                            var full_addr = response.results[0].formatted_address;

                            if(!pinDropStreet) {
                                pinDropStreet = full_addr.substring(0, full_addr.indexOf(","));
                            }

                            console.log('geocoder street -> ' + pinDropStreet);
                            console.log('geocoder city -> ' + pinDropCity);
                            console.log('geocoder state -> ' + pinDropState);
                            console.log('geocoder pinDropFullState -> ' + pinDropFullState);
                            console.log('geocoder zip -> ' + pinDropZip);
                            console.log('geocoder country -> ' + pinDropCountry);
                            console.log('geocoder lat -> ' + pinDropLat);
                            console.log('geocoder lng -> ' + pinDropLng);
                            var create_record = "<br/><br/><button class=\"slds-button\" onclick=sendRecordActionToPanel(\'" + "create"+ "\')>New Record</button>";

                            tempMarker.infoWindow = new google.maps.InfoWindow({
                                content: "<b>Create new record from this location:</b><br/><br/>"
                                            + "Coord: (" + lat + ", " + lng + ")<br/><br/>"
                                            + "Address: " + full_addr + 
                                            create_record
                            });

                            if(infoWindow){
                                infoWindow.close();
                            }
                            markers.push(tempMarker);
                            markers.forEach((element) => {
                                element.infoWindow.close();
                            });
                            tempMarker.infoWindow.open(map, tempMarker);

                            tempMarker.addListener("click", function() {
                                if(infoWindow) {
                                    infoWindow.close();
                                }
                                markers.forEach((element) => {
                                    element.infoWindow.close();
                                });
                                console.log('tempMarker icon ->', tempMarker.getIcon());
                                tempMarker.infoWindow.open(map, tempMarker);
                            });

                        }
                        else {
                            window.alert("No results found");
                        }
                    })
                    .catch((e) => window.alert("Geocoder failed due to: " + e));
                    
                }

                function createSidePanelControl(map) {

                    console.log('creating side panel control');
                    const sidePanelControl = document.createElement("div");

                    // Set CSS for the control border.
                    const controlUI = document.createElement("div");

                    controlUI.style.backgroundColor = "#fff";
                    controlUI.style.border = "2px solid #fff";
                    controlUI.style.borderRadius = "3px";
                    controlUI.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
                    controlUI.style.cursor = "pointer";
                    controlUI.style.marginTop = "8px";
                    controlUI.style.marginBottom = "22px";
                    controlUI.style.textAlign = "center";
                    controlUI.style.transition = "0.5s";
                    controlUI.title = "Open Sidebar";
                    sidePanelControl.appendChild(controlUI);

                    // Set CSS for the control interior.
                    const controlText = document.createElement("div");

                    controlText.style.color = "rgb(25,25,25)";
                    controlText.style.fontFamily = "Roboto,Arial,sans-serif";
                    controlText.style.fontSize = "16px";
                    controlText.style.lineHeight = "38px";
                    controlText.style.paddingLeft = "5px";
                    controlText.style.paddingRight = "5px";
                    controlText.innerHTML = "<";
                    controlUI.appendChild(controlText);

                    map.controls[google.maps.ControlPosition.LEFT_CENTER].push(sidePanelControl);


                    controlUI.addEventListener("click", () => {
                        openSidebarPanel();
                        hideOpenPanelControl();
                    });
                }

                function createCurrentLocationControl(map) {

                    console.log('creating current location control');
                    const currentLocationControl = document.createElement("div");

                    // Set CSS for the control border.
                    const controlUI = document.createElement("div");

                    controlUI.style.backgroundColor = "#fff";
                    controlUI.style.border = "2px solid #fff";
                    controlUI.style.borderRadius = "3px";
                    controlUI.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
                    controlUI.style.cursor = "pointer";
                    controlUI.style.marginRight = "15px";
                    controlUI.style.textAlign = 'center';
                    controlUI.style.width = '32px';
                    controlUI.style.paddingTop = '3px';
                    controlUI.style.paddingBottom = '3px';
                    controlUI.style.color = '#747474';
                    controlUI.style.marginBottom = '4px';

                    controlUI.title = "Get Current Location";
                    currentLocationControl.appendChild(controlUI);

                    // Set CSS for the control interior.
                    const controlText = document.createElement("div");

                    controlText.innerHTML = "<i class=\"material-icons\">my_location</i>";
                    controlUI.appendChild(controlText);

                    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(currentLocationControl);


                    controlUI.addEventListener("click", () => {
                        goToCurrentLocation();
                    });
                }

                function createZoomControl(map) {

                    console.log('creating zoom control');
                    const zoomControl = document.createElement("div");

                    // Set CSS for the control wrapper
                    var controlWrapper = document.createElement('div');
                    controlWrapper.style.backgroundColor = "#fff";
                    controlWrapper.style.border = "2px solid #fff";
                    controlWrapper.style.borderRadius = "3px";
                    controlWrapper.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
                    controlWrapper.style.cursor = 'pointer';
                    controlWrapper.style.marginRight = "15px";
                    controlWrapper.style.textAlign = 'center';
                    controlWrapper.style.width = '32px';
                    controlWrapper.style.color = '#747474';
                    controlWrapper.style.marginBottom = '6rem'

                    zoomControl.appendChild(controlWrapper);

                    // Set CSS for the zoomIn
                    var zoomInButton = document.createElement('div');
                    zoomInButton.style.padding = '3px';
                    zoomInButton.style.userSelect = 'none';
                    zoomInButton.style.outline = '0';
                    zoomInButton.innerHTML = "<i class=\"material-icons\">add</i>";
                    controlWrapper.appendChild(zoomInButton);

                    // Set CSS for the zoomOut
                    var zoomOutButton = document.createElement('div');
                    zoomOutButton.style.padding = '3px';
                    zoomOutButton.style.borderTop = '1px solid #e5e5e5';
                    zoomOutButton.style.userSelect = 'none';
                    zoomOutButton.style.outline = '0';
                    zoomOutButton.innerHTML = "<i class=\"material-icons\">remove</i>";
                    controlWrapper.appendChild(zoomOutButton);

                    // Setup the click event listener - zoomIn
                    google.maps.event.addDomListener(zoomInButton, 'click', function() {
                        map.setZoom(map.getZoom() + 1);
                    });

                    // Setup the click event listener - zoomOut
                    google.maps.event.addDomListener(zoomOutButton, 'click', function() {
                        map.setZoom(map.getZoom() - 1);
                    });  

                    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(zoomControl);
                }

                function createSearchControl(map) {
                    const input = document.getElementById("search-location-input");
                    const options = {
                        fields: ["formatted_address", "geometry", "name"],
                    };
                    const autocomplete = new google.maps.places.Autocomplete(input, options);

                    map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);

                    autocomplete.addListener("place_changed", () => {
                        const place = autocomplete.getPlace();
                        console.log('place -> ', place);

                        if (!place.geometry || !place.geometry.location) {
                            // User entered the name of a Place that was not suggested and
                            // pressed the Enter key, or the Place Details request failed.
                            window.alert("No details available for input: '" + place.name + "'");
                            return;
                        }
                        if (place.geometry.viewport) {
                            map.fitBounds(place.geometry.viewport);
                        }
                        else {
                            map.setCenter(place.geometry.location);
                            map.setZoom(17);
                        }
                        console.log('location on search pin below');
                        let geoLoc = place.geometry.location;

                        createPin(geoLoc.lat(), geoLoc.lng());
                    });
                }

                function clearMarkers() {
                    for (var i = 0; i < markers.length; i++ ) {
                        markers[i].setMap(null);
                    }
                    markers.length = 0;
                }

                function hideOpenPanelControl() {
                    map.controls[google.maps.ControlPosition.LEFT_CENTER].pop();
                }

                function openSidebarPanel() {
                    sendToLC({"request":"openSidePanel", "vfHost": vfHost});
                }

                function closeSidePanel() {
                    document.getElementById("sidebarPanel").style.width = "0";
                    document.getElementById("main").style.marginLeft= "0";
                    createSidePanelControl(map);
                }

                function goToCurrentLocation() {
                    sendToLC({"request":"goToCurrentLocation", "vfHost": vfHost});
                }

                function sendRecordActionToPanel(action, id, type, label) {
                    if(action == 'create') {
                        sendToLC({"request":"panelAction", "vfHost": vfHost, "action": action, 
                                    "id": id, "type": type, "street": pinDropStreet, "city": pinDropCity, 
                                    "state": pinDropState, "fullState": pinDropFullState, "zip": pinDropZip, "country": pinDropCountry,
                                    "lat" : pinDropLat, "lng" : pinDropLng, "label" : label});
                    }
                    else {
                        sendToLC({"request":"panelAction", "vfHost": vfHost, "action": action, "id": id, "type": type});
                        hideOpenPanelControl();
                    }
                }
                
            </script>
        </body>

    </html>

</apex:page>